trigger:
  branches:
    include:
      - master

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"

stages:
  - stage: build
    displayName: 'Build'
    jobs:
      - job: build
        displayName: 'Build Job'
        pool: Petclinic
        steps:
          - script: |
              mvn clean compile

  - stage: test
    displayName: 'Test'
    jobs:
      - job: test
        displayName: 'Test Job'
        pool: Petclinic
        steps:
          - script: mvn test

  - stage: ansible_deploy_test
    displayName: 'Ansible Deploy to Test'
    jobs:
      - job: ansible_deploy_test
        displayName: 'Ansible Deploy Test Job'
        pool: Petclinic
        steps:
          - script: |
              ansible-playbook -i /home/andychen/ansible_project/inventory/test /home/andychen/ansible_project/playbook/petclinic_app_test
  

  - stage: package
    displayName: 'Package'
    jobs:
      - job: package
        displayName: 'Package Job'
        pool: Petclinic
        steps:
          - script: mvn package

  - stage: deploy_tomcat
    displayName: 'Deploy to Tomcat'
    jobs:
      - job: deploy
        displayName: 'Deploy to Tomcat Job'
        pool: Petclinic
        steps:
          - script: mvn tomcat7:deploy


  - stage: load_test
    displayName: 'Load Test'
    jobs:
      - job: load_test
        displayName: 'JMeter Load Test Job'
        pool: Petclinic
        steps:

          - task: CmdLine@2
            displayName: 'Run JMeter Locally'
            inputs:
              script: |
                # Remove old jmeter_report before running
                rm -rf $(Pipeline.Workspace)/jmeter_report
                rm -rf $(Pipeline.Workspace)/results.jtl

                displayName: 'Clean Up Old JMeter Reports'
                
                # Run the JMeter load test using the locally installed JMeter
                jmeter -Jmeter.save.saveservice.output_format=xml -n -t $(Pipeline.Workspace)/load-test-repo/load-test.jmx -l $(Pipeline.Workspace)/results.jtl -e -o $(Pipeline.Workspace)/jmeter_report

  - stage: ansible_deploy_load
    displayName: 'Ansible Deploy to Load'
    jobs:
      - job: ansible_deploy_load
        displayName: 'Ansible Deploy Load Job'
        pool: Petclinic
        steps:
          - script: |
              ansible-playbook -i /home/andychen/ansible_project/playbook/production.yml


  - stage: run_selenium_test
    displayName: 'Run Selenium Test'
    jobs:
      - job: run_selenium_test
        displayName: 'Run Selenium Test Job'
        pool: Petclinic 
        steps:
          - script: |
              python /home/andychen/devoteam-traineeship-petclinic/selenium-test.py
              pip install -r requirements.txt
              pytest --html=report.html
          - task: PublishTestResults@2
            displayName: 'Publish Selenium Test Results'
            inputs:
              testResultsFiles: 'report.html'
              testRunTitle: 'Selenium Test Results'

  - stage: ansible_deploy_selenium
    displayName: 'Ansible Deploy to Selenium'
    jobs:
      - job: ansible_deploy_selenium
        displayName: 'Ansible Deploy Selenium Job'
        pool: Petclinic
        steps:
          - script: |
              ansible-playbook -i /home/andychen/ansible_project/playbook/acceptance.yml
     



schedules:
- cron: "0 0 * * *"   
  displayName: DailySchedule
  branches:
    include:
      - master
